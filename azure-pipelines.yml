pr: none
trigger:
  - '*'

variables:
  isMain: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  dockerRegistry: stefanpuia.azurecr.io
  dockerImage: discord-hof
  dockerImageVersion: $(Build.BuildNumber)
  dockerRegistryServiceConnection: azureContainerRegistry-discord-hall-of-fame
  dockerContainerName: discord-hof
  dockerContainerPort: 38142

stages:
  - stage: checkAndBuild
    displayName: Check and Build
    jobs:
      - job: checkAndBuild
        steps:
          - script: yarn install --frozen-lockfile
            displayName: Install Dependencies

          - script: yarn lint
            displayName: Lint

          - script: yarn build
            displayName: Build

          - task: Docker@2
            displayName: Build docker image
            inputs:
              command: build
              repository: $(dockerRegistry)/$(dockerImage)
              tags: $(dockerImageVersion)

          - ${{ if eq(variables.isMain, true) }}:
              - task: Docker@2
                displayName: Login to ACR
                inputs:
                  command: login
                  containerRegistry: $(dockerRegistryServiceConnection)

              - task: Docker@2
                displayName: Push image
                inputs:
                  command: push
                  containerRegistry: $(dockerRegistryServiceConnection)
                  repository: $(dockerImage)
                  tags: $(dockerImageVersion)

              - task: Docker@2
                displayName: Docker Logout
                inputs:
                  command: logout
                  containerRegistry: $(dockerRegistryServiceConnection)
                condition: always()

  - ${{ if eq(variables.isMain, true) }}:
      - stage: deployProd
        displayName: Deploy
        dependsOn: checkAndBuild
        jobs:
          - deployment: deployProd
            pool: prod-vm-uks-core
            environment: prod
            variables:
              - group: deploy-prod
              - group: deploy-prod-kv
            strategy:
              runOnce:
                deploy:
                  steps:
                    - task: Docker@2
                      displayName: Login to ACR
                      inputs:
                        command: login
                        containerRegistry: $(dockerRegistryServiceConnection)

                    - script: docker pull $(dockerRegistry)/$(dockerImage):$(dockerImageVersion)
                      displayName: Pull image

                    - task: Docker@2
                      displayName: Docker Logout
                      inputs:
                        command: logout
                        containerRegistry: $(dockerRegistryServiceConnection)
                      condition: always()

                    - script: docker rm -f $(dockerContainerName)
                      displayName: Remove existing container

                    - script: |
                        docker run -d \
                          --name $(dockerContainerName) \
                          --restart always \
                          -p $(dockerContainerPort):8080 \
                          -e PORT \
                          -e BASE_URL \
                          -e MONGODB_CONNECTION_STRING \
                          -e MONGODB_DATABASE \
                          -e DISCORD_CLIENT_ID \
                          -e DISCORD_CLIENT_SECRET \
                          -e DISCORD_BOT_ID \
                          -e DISCORD_BOT_TOKEN \
                          -e BLOB_STORAGE_ACCOUNT \
                          -e BLOB_STORAGE_KEY \
                          $(dockerRegistry)/$(dockerImage):$(dockerImageVersion)
                      displayName: Start container
                      env:
                        PORT: 8080
                        BASE_URL: $(appBaseUrl)
                        MONGODB_CONNECTION_STRING: $(db-connection-string)
                        MONGODB_DATABASE: $(database-name)
                        DISCORD_CLIENT_ID: $(discord-client-id)
                        DISCORD_CLIENT_SECRET: $(discord-client-secret)
                        DISCORD_BOT_ID: $(discord-client-id)
                        DISCORD_BOT_TOKEN: $(discord-bot-token)
                        BLOB_STORAGE_ACCOUNT: $(blob-storage-account)
                        BLOB_STORAGE_KEY: $(blob-storage-key)
